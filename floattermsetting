CUSTOM TERMINAL USAGE

>lua
    local Terminal  = require('toggleterm.terminal').Terminal
    local lazygit = Terminal:new({ cmd = "lazygit", hidden = true })
    
    function _lazygit_toggle()
      lazygit:toggle()
    end
    
    vim.api.nvim_set_keymap("n", "<leader>g", "<cmd>lua _lazygit_toggle()<CR>", {noremap = true, silent = true})
<

This will create a new terminal, but the specified command is not being run
immediately. The command will run once the terminal is opened. Alternatively
`term:spawn()` can be used to start the command in a background buffer without
opening a terminal window yet. If the `hidden` key is set to true, this
terminal will not be toggled by normal toggleterm commands such as
`:ToggleTerm` or the open mapping. It will only open and close by using the
returned terminal object. A mapping for toggling the terminal can be set as in
the example above.

Alternatively the terminal can be specified with a count, which is the number
that can be used to trigger this specific terminal. This can then be triggered
using the current count e.g. `:5ToggleTerm<CR>`

>lua
    local lazygit = Terminal:new({ cmd = "lazygit", count = 5 })
<

You can also set a custom layout for a terminal.

>lua
    local lazygit = Terminal:new({
      cmd = "lazygit",
      dir = "git_dir",
      direction = "float",
      float_opts = {
        border = "double",
      },
      -- function to run on opening the terminal
      on_open = function(term)
        vim.cmd("startinsert!")
        vim.api.nvim_buf_set_keymap(term.bufnr, "n", "q", "<cmd>close<CR>", {noremap = true, silent = true})
      end,
      -- function to run on closing the terminal
      on_close = function(term)
        vim.cmd("startinsert!")
      end,
    })
    
    function _lazygit_toggle()
      lazygit:toggle()
    end
    
    vim.api.nvim_set_keymap("n", "<leader>g", "<cmd>lua _lazygit_toggle()<CR>", {noremap = true, silent = true})
<

**WARNING**do not use any of the private functionality of the terminal or other
non-public parts of the API as these can change in the future.


STATUSLINE ~

To tell each terminal apart you can use the terminal buffer variable
`b:toggle_number` in your statusline

>vim
    " this is pseudo code
    let statusline .= '%{&ft == "toggleterm" ? "terminal (".b:toggle_number.")" : ""}'
<


CUSTOM COMMANDS ~

You can create your own commands by using the lua functions this plugin
provides directly

>vim
    command! -count=1 TermGitPush  lua require'toggleterm'.exec("git push",    <count>, 12)
    command! -count=1 TermGitPushF lua require'toggleterm'.exec("git push -f", <count>, 12)
<


OPEN MULTIPLE TERMINALS SIDE-BY-SIDE ~

  Direction    Supported
  ------------ -----------
  vertical     
  horizontal   
  tab          
  float        
Inyour first terminal, you need to leave the `TERMINAL` mode using C-\C-N which
can be remapped to Esc for ease of use.

Then you type on: `2<C-\>`, and the result:

Explain:

- `2`this is the terminal’s number (or ID), your first terminal is `1` (e.g. your 3rd terminal will be `3<C-\>`, so on).
- C-\this is the combined key mapping to the command `:ToggleTerm`.


FAQ ~


HOW DO I GET THIS PLUGIN TO WORK WITH POWERSHELL?

Please check out the Wiki section on this topic
<https://github.com/akinsho/toggleterm.nvim/wiki/Tips-and-Tricks#using-toggleterm-with-powershell>.

==============================================================================
1. Links                                                    *toggleterm-links*

1. *lazy git*: https://user-images.githubusercontent.com/22454918/116447435-e69f1480-a84f-11eb-86dd-19fa29646aa1.png
2. *image*: https://user-images.githubusercontent.com/31947091/133395516-22fef1e6-633d-4964-9175-f76fabf66794.png
3. *image*: https://user-images.githubusercontent.com/31947091/133396789-fdf68b30-3a8c-440b-822f-6549f282c4fc.png

Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

